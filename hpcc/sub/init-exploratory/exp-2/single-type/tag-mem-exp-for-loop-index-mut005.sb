#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########
 
#SBATCH --time=12:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-400
#SBATCH --mem=4G                    # memory required per node - amount of memory (in bytes)
#SBATCH --job-name tmem-fli         # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/tag-based-mem/data-e2
CONFIG_DIR=/mnt/scratch/lalejini/data/tag-based-mem/config
EXAMPLES_DIR=/mnt/home/lalejini/devo_ws/gp-tag-based-memory/data/prog-synth-examples

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=22000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Problem-specific configuration
PROBLEM=for-loop-index
MAX_PROG_SIZE=128
PROG_EVAL_TIME=256
GENERATIONS=300

MUT_RATE=005
PROG_MUT__PER_BIT_FLIP=0.${MUT_RATE}
PROG_MUT__PER_NUMERIC_ARG_SUB=0.${MUT_RATE}

##################################
# A few utility variables
PROGRAM_ARGUMENT_MODE__TAG_ONLY=0
PROGRAM_ARGUMENT_MODE__NUM_ONLY=1
PROGRAM_ARGUMENT_MODE__TAG_AND_NUM=2

##################################
# Setup general configuration
BENCHMARK_DATA_DIR=${EXAMPLES_DIR}
SNAPSHOT_INTERVAL=${GENERATIONS}
SUMMARY_STATS_INTERVAL=100

PROG_POP_SIZE=512
USE_MODULES=0

PROG_MUT__PER_INST_SUB=0.005
PROG_MUT__PER_INST_INS=0.005
PROG_MUT__PER_INST_DEL=0.005
PROG_MUT__PER_PROG_SLIP=0.05
PROG_MUT__PER_MOD_DUP=0.00
PROG_MUT__PER_MOD_DEL=0.00

###### Treatments #######

TREATMENT__ARGS_TAG_ONLY__MEM_NO_SEARCH__MIN=1
TREATMENT__ARGS_TAG_ONLY__MEM_NO_SEARCH__MAX=200

TREATMENT__ARGS_NUM_ONLY__MEM_NO_SEARCH__MIN=201
TREATMENT__ARGS_NUM_ONLY__MEM_NO_SEARCH__MAX=400

# TREATMENT__ARGS_BOTH__MEM_NO_SEARCH__MIN=201
# TREATMENT__ARGS_BOTH__MEM_NO_SEARCH__MAX=300

####################################################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_TAG_ONLY__MEM_NO_SEARCH__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_TAG_ONLY__MEM_NO_SEARCH__MAX} ] ; then
  PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__TAG_ONLY}
  PROGRAM_ARGUMENTS_TYPE_SEARCH=0
  NAME=ARGS_TAG_ONLY__MEM_SEARCH_${PROGRAM_ARGUMENTS_TYPE_SEARCH}__MUT_${MUT_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_NUM_ONLY__MEM_NO_SEARCH__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_NUM_ONLY__MEM_NO_SEARCH__MAX} ] ; then
  PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__NUM_ONLY}
  PROGRAM_ARGUMENTS_TYPE_SEARCH=0
  NAME=ARGS_NUM_ONLY__MEM_SEARCH_${PROGRAM_ARGUMENTS_TYPE_SEARCH}__MUT_${MUT_RATE}

# elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_BOTH__MEM_NO_SEARCH__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_BOTH__MEM_NO_SEARCH__MAX} ] ; then
#   PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__TAG_AND_NUM}
#   PROGRAM_ARGUMENTS_TYPE_SEARCH=0
#   NAME=ARGS_BOTH__MEM_SEARCH_${PROGRAM_ARGUMENTS_TYPE_SEARCH}__MUT_${MUT_RATE}

else 
  echo "${SEED} from ${PROBLEM} failed to launch" >> /mnt/home/lalejini/devo_ws/gp-tag-based-memory/hpcc/sub/failtolaunch.txt

fi

####################################################################

RUN_NAME=PROBLEM_${PROBLEM}__${NAME}__${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

# Make run directory
mkdir -p ${RUN_DIR}

cd ${RUN_DIR}

cp -R ${CONFIG_DIR}/* .

echo "./prog_synth -SEED ${SEED} -PROBLEM ${PROBLEM} -GENERATIONS ${GENERATIONS} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -PROG_MUT__PER_BIT_FLIP ${PROG_MUT__PER_BIT_FLIP} -PROG_MUT__PER_NUMERIC_ARG_SUB ${PROG_MUT__PER_NUMERIC_ARG_SUB} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -PROG_POP_SIZE ${PROG_POP_SIZE} -USE_MODULES ${USE_MODULES} -PROG_MUT__PER_INST_SUB ${PROG_MUT__PER_INST_SUB} -PROG_MUT__PER_INST_INS ${PROG_MUT__PER_INST_INS} -PROG_MUT__PER_INST_DEL ${PROG_MUT__PER_INST_DEL} -PROG_MUT__PER_PROG_SLIP ${PROG_MUT__PER_PROG_SLIP} -PROG_MUT__PER_MOD_DUP ${PROG_MUT__PER_MOD_DUP} -PROG_MUT__PER_MOD_DEL ${PROG_MUT__PER_MOD_DEL} -PROGRAM_ARGUMENT_MODE ${PROGRAM_ARGUMENT_MODE} -PROGRAM_ARGUMENTS_TYPE_SEARCH ${PROGRAM_ARGUMENTS_TYPE_SEARCH} > run.log" > ./cmd.txt

./prog_synth -SEED ${SEED} -PROBLEM ${PROBLEM} -GENERATIONS ${GENERATIONS} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -PROG_MUT__PER_BIT_FLIP ${PROG_MUT__PER_BIT_FLIP} -PROG_MUT__PER_NUMERIC_ARG_SUB ${PROG_MUT__PER_NUMERIC_ARG_SUB} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -PROG_POP_SIZE ${PROG_POP_SIZE} -USE_MODULES ${USE_MODULES} -PROG_MUT__PER_INST_SUB ${PROG_MUT__PER_INST_SUB} -PROG_MUT__PER_INST_INS ${PROG_MUT__PER_INST_INS} -PROG_MUT__PER_INST_DEL ${PROG_MUT__PER_INST_DEL} -PROG_MUT__PER_PROG_SLIP ${PROG_MUT__PER_PROG_SLIP} -PROG_MUT__PER_MOD_DUP ${PROG_MUT__PER_MOD_DUP} -PROG_MUT__PER_MOD_DEL ${PROG_MUT__PER_MOD_DEL} -PROGRAM_ARGUMENT_MODE ${PROGRAM_ARGUMENT_MODE} -PROGRAM_ARGUMENTS_TYPE_SEARCH ${PROGRAM_ARGUMENTS_TYPE_SEARCH} > run.log

