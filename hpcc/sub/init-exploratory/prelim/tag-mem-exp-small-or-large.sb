#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########
 
#SBATCH --time=48:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-180
#SBATCH --mem=4G                    # memory required per node - amount of memory (in bytes)
#SBATCH --job-name tmem-sol         # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/tag-based-mem/data
CONFIG_DIR=/mnt/scratch/lalejini/data/tag-based-mem/config
EXAMPLES_DIR=/mnt/home/lalejini/devo_ws/gp-tag-based-memory/data/prog-synth-examples

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=1000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Problem-specific configuration
PROBLEM=small-or-large
MAX_PROG_SIZE=64
PROG_EVAL_TIME=64

##################################
# A few utility variables
PROGRAM_ARGUMENT_MODE__TAG_ONLY=0
PROGRAM_ARGUMENT_MODE__NUM_ONLY=1
PROGRAM_ARGUMENT_MODE__TAG_AND_NUM=2

##################################
# Setup general configuration
BENCHMARK_DATA_DIR=${EXAMPLES_DIR}
GENERATIONS=1000
SNAPSHOT_INTERVAL=500
SUMMARY_STATS_INTERVAL=100

PROG_POP_SIZE=512
USE_MODULES=0

# PROG_MUT__PER_BIT_FLIP=0.001
# PROG_MUT__PER_NUMERIC_ARG_SUB=0.001
PROG_MUT__PER_INST_SUB=0.005
PROG_MUT__PER_INST_INS=0.005
PROG_MUT__PER_INST_DEL=0.005
PROG_MUT__PER_PROG_SLIP=0.05
PROG_MUT__PER_MOD_DUP=0.00
PROG_MUT__PER_MOD_DEL=0.00

###### Treatments #######
TREATMENT__ARGS_TAG_ONLY__BFR_001__MIN=1
TREATMENT__ARGS_TAG_ONLY__BFR_001__MAX=30

TREATMENT__ARGS_TAG_ONLY__BFR_005__MIN=31
TREATMENT__ARGS_TAG_ONLY__BFR_005__MAX=60

TREATMENT__ARGS_TAG_ONLY__BFR_01__MIN=61
TREATMENT__ARGS_TAG_ONLY__BFR_01__MAX=90

TREATMENT__ARGS_NUM_ONLY__ASR_001__MIN=91
TREATMENT__ARGS_NUM_ONLY__ASR_001__MAX=120

TREATMENT__ARGS_NUM_ONLY__ASR_005__MIN=121
TREATMENT__ARGS_NUM_ONLY__ASR_005__MAX=150

TREATMENT__ARGS_NUM_ONLY__ASR_01__MIN=151
TREATMENT__ARGS_NUM_ONLY__ASR_01__MAX=180

####################################################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_TAG_ONLY__BFR_001__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_TAG_ONLY__BFR_001__MAX} ] ; then
  NAME=ARGS_TAG_ONLY__BFR_001
  PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__TAG_ONLY}
  PROG_MUT__PER_BIT_FLIP=0.001
  PROG_MUT__PER_NUMERIC_ARG_SUB=0.0
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_TAG_ONLY__BFR_005__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_TAG_ONLY__BFR_005__MAX} ] ; then
  NAME=ARGS_TAG_ONLY__BFR_005
  PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__TAG_ONLY}
  PROG_MUT__PER_BIT_FLIP=0.005
  PROG_MUT__PER_NUMERIC_ARG_SUB=0.0
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_TAG_ONLY__BFR_01__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_TAG_ONLY__BFR_01__MAX} ] ; then
  NAME=ARGS_TAG_ONLY__BFR_01
  PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__TAG_ONLY}
  PROG_MUT__PER_BIT_FLIP=0.01
  PROG_MUT__PER_NUMERIC_ARG_SUB=0.0
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_NUM_ONLY__ASR_001__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_NUM_ONLY__ASR_001__MAX} ] ; then
  NAME=ARGS_NUM_ONLY__ASR_001
  PROGRAM_ARGUMENT_MODE=PROGRAM_ARGUMENT_MODE__NUM_ONLY
  PROG_MUT__PER_BIT_FLIP=0.0
  PROG_MUT__PER_NUMERIC_ARG_SUB=0.001
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_NUM_ONLY__ASR_005__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_NUM_ONLY__ASR_005__MAX} ] ; then
  NAME=ARGS_NUM_ONLY__ASR_005
  PROGRAM_ARGUMENT_MODE=PROGRAM_ARGUMENT_MODE__NUM_ONLY
  PROG_MUT__PER_BIT_FLIP=0.0
  PROG_MUT__PER_NUMERIC_ARG_SUB=0.005
elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__ARGS_NUM_ONLY__ASR_01__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__ARGS_NUM_ONLY__ASR_01__MAX} ] ; then
  NAME=ARGS_NUM_ONLY__ASR_01
  PROGRAM_ARGUMENT_MODE=PROGRAM_ARGUMENT_MODE__NUM_ONLY
  PROG_MUT__PER_BIT_FLIP=0.0
  PROG_MUT__PER_NUMERIC_ARG_SUB=0.01
else 
  echo "${SEED} from ${PROBLEM} failed to launch" >> /mnt/home/lalejini/devo_ws/gp-tag-based-memory/hpcc/sub/failtolaunch.txt
fi 

####################################################################

RUN_NAME=PROBLEM_${PROBLEM}__${NAME}__${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

# Make run directory
mkdir -p ${RUN_DIR}

cd ${RUN_DIR}

cp -R ${CONFIG_DIR}/* .

echo "prog_synth -SEED ${SEED} -PROBLEM ${PROBLEM} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -GENERATIONS ${GENERATIONS} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -PROG_POP_SIZE ${PROG_POP_SIZE} -USE_MODULES ${USE_MODULES} -PROG_MUT__PER_INST_SUB ${PROG_MUT__PER_INST_SUB} -PROG_MUT__PER_INST_INS ${PROG_MUT__PER_INST_INS} -PROG_MUT__PER_INST_DEL ${PROG_MUT__PER_INST_DEL} -PROG_MUT__PER_PROG_SLIP ${PROG_MUT__PER_PROG_SLIP} -PROG_MUT__PER_MOD_DUP ${PROG_MUT__PER_MOD_DUP} -PROG_MUT__PER_MOD_DEL ${PROG_MUT__PER_MOD_DEL} -PROGRAM_ARGUMENT_MODE ${PROGRAM_ARGUMENT_MODE} -PROG_MUT__PER_BIT_FLIP ${PROG_MUT__PER_BIT_FLIP} -PROG_MUT__PER_NUMERIC_ARG_SUB ${PROG_MUT__PER_NUMERIC_ARG_SUB}" > ./cmd.txt

./prog_synth -SEED ${SEED} -PROBLEM ${PROBLEM} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -GENERATIONS ${GENERATIONS} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -PROG_POP_SIZE ${PROG_POP_SIZE} -USE_MODULES ${USE_MODULES} -PROG_MUT__PER_INST_SUB ${PROG_MUT__PER_INST_SUB} -PROG_MUT__PER_INST_INS ${PROG_MUT__PER_INST_INS} -PROG_MUT__PER_INST_DEL ${PROG_MUT__PER_INST_DEL} -PROG_MUT__PER_PROG_SLIP ${PROG_MUT__PER_PROG_SLIP} -PROG_MUT__PER_MOD_DUP ${PROG_MUT__PER_MOD_DUP} -PROG_MUT__PER_MOD_DEL ${PROG_MUT__PER_MOD_DEL} -PROGRAM_ARGUMENT_MODE ${PROGRAM_ARGUMENT_MODE} -PROG_MUT__PER_BIT_FLIP ${PROG_MUT__PER_BIT_FLIP} -PROG_MUT__PER_NUMERIC_ARG_SUB ${PROG_MUT__PER_NUMERIC_ARG_SUB} > run.log

