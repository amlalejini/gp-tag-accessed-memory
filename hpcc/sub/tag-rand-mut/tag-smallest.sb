#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########

#SBATCH --time=2:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-450
#SBATCH --mem=4G                    # memory required per node - amount of memory (in bytes)
#SBATCH --job-name tbf-med         # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

DATA_DIR=/mnt/scratch/lalejini/data/tag-based-mem/tag-rand-mut
CONFIG_DIR=/mnt/scratch/lalejini/data/tag-based-mem/config
EXAMPLES_DIR=/mnt/home/lalejini/devo_ws/gp-tag-accessed-memory/data/prog-synth-examples

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=1000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# Problem-specific configuration
PROBLEM=smallest
MAX_PROG_SIZE=64
PROG_EVAL_TIME=64
GENERATIONS=300

MUT_RATE__TAG_BF=005

MUT_RATE__TAG_RAND__0005=0005
MUT_RATE__TAG_RAND__001=001
MUT_RATE__TAG_RAND__002=002
MUT_RATE__TAG_RAND__005=005
MUT_RATE__TAG_RAND__01=01
MUT_RATE__TAG_RAND__02=02
MUT_RATE__TAG_RAND__05=05
MUT_RATE__TAG_RAND__1=1
MUT_RATE__TAG_RAND__2=2

##################################
# A few utility variables
PROGRAM_ARGUMENT_MODE__TAG_ONLY=0
PROGRAM_ARGUMENT_MODE__NUM_ONLY=1
PROGRAM_ARGUMENT_MODE__TAG_AND_NUM=2

##################################
# Setup general configuration
BENCHMARK_DATA_DIR=${EXAMPLES_DIR}
SNAPSHOT_INTERVAL=${GENERATIONS}
SUMMARY_STATS_INTERVAL=100

ARG_MODE_NAME=TAG
PROGRAM_ARGUMENT_MODE=${PROGRAM_ARGUMENT_MODE__TAG_ONLY}
PROGRAM_ARGUMENTS_TYPE_SEARCH=0

PROG_POP_SIZE=500
USE_MODULES=0

PROG_MUT__PER_INST_SUB=0.005
PROG_MUT__PER_INST_INS=0.005
PROG_MUT__PER_INST_DEL=0.005
PROG_MUT__PER_PROG_SLIP=0.05
PROG_MUT__PER_MOD_DUP=0.00
PROG_MUT__PER_MOD_DEL=0.00
PROG_MUT__PER_NUMERIC_ARG_SUB=0.00

###### Treatments #######

REPLICATES=50

TREATMENT_ID=0
MUT_RATE__TAG_RAND__0005__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__0005__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__001__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__001__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__002__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__002__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__005__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__005__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__01__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__01__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__02__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__02__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__05__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__05__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__1__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__1__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))

((TREATMENT_ID++))
MUT_RATE__TAG_RAND__2__START=$((1 + $TREATMENT_ID*$REPLICATES))
MUT_RATE__TAG_RAND__2__END=$(($TREATMENT_ID*$REPLICATES + $REPLICATES))


####################################################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__0005__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__0005__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__0005}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__001__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__001__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__001}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__002__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__002__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__002}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__005__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__005__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__005}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__01__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__01__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__01}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__02__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__02__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__02}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__05__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__05__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__05}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__1__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__1__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__1}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${MUT_RATE__TAG_RAND__2__START} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${MUT_RATE__TAG_RAND__2__END} ] ; then
  TAG_BF_RATE=${MUT_RATE__TAG_BF}
  TAG_RAND_RATE=${MUT_RATE__TAG_RAND__2}

  PROG_MUT__PER_BIT_FLIP=0.${TAG_BF_RATE}
  PROG_MUT__PER_TAG_RANDOMIZE=0.${TAG_RAND_RATE}
  NAME=ARGS_${ARG_MODE_NAME}__TAG_BF_${TAG_BF_RATE}__TAG_RAND_${TAG_RAND_RATE}

else
  echo "${SEED} from ${PROBLEM} (${NAME}) failed to launch" >> /mnt/home/lalejini/failtolaunch.txt

fi

####################################################################

RUN_NAME=PROBLEM_${PROBLEM}__${NAME}__${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

# Make run directory
mkdir -p ${RUN_DIR}

cd ${RUN_DIR}

cp -R ${CONFIG_DIR}/* .

echo "./prog_synth -SEED ${SEED} -PROBLEM ${PROBLEM} -GENERATIONS ${GENERATIONS} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -PROG_MUT__PER_BIT_FLIP ${PROG_MUT__PER_BIT_FLIP} -PROG_MUT__PER_NUMERIC_ARG_SUB ${PROG_MUT__PER_NUMERIC_ARG_SUB} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -PROG_POP_SIZE ${PROG_POP_SIZE} -USE_MODULES ${USE_MODULES} -PROG_MUT__PER_INST_SUB ${PROG_MUT__PER_INST_SUB} -PROG_MUT__PER_INST_INS ${PROG_MUT__PER_INST_INS} -PROG_MUT__PER_INST_DEL ${PROG_MUT__PER_INST_DEL} -PROG_MUT__PER_PROG_SLIP ${PROG_MUT__PER_PROG_SLIP} -PROG_MUT__PER_MOD_DUP ${PROG_MUT__PER_MOD_DUP} -PROG_MUT__PER_MOD_DEL ${PROG_MUT__PER_MOD_DEL} -PROGRAM_ARGUMENT_MODE ${PROGRAM_ARGUMENT_MODE} -PROGRAM_ARGUMENTS_TYPE_SEARCH ${PROGRAM_ARGUMENTS_TYPE_SEARCH} -PROG_MUT__PER_TAG_RANDOMIZE ${PROG_MUT__PER_TAG_RANDOMIZE} > run.log" > ./cmd.txt

./prog_synth -SEED ${SEED} -PROBLEM ${PROBLEM} -GENERATIONS ${GENERATIONS} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -PROG_MUT__PER_BIT_FLIP ${PROG_MUT__PER_BIT_FLIP} -PROG_MUT__PER_NUMERIC_ARG_SUB ${PROG_MUT__PER_NUMERIC_ARG_SUB} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -PROG_POP_SIZE ${PROG_POP_SIZE} -USE_MODULES ${USE_MODULES} -PROG_MUT__PER_INST_SUB ${PROG_MUT__PER_INST_SUB} -PROG_MUT__PER_INST_INS ${PROG_MUT__PER_INST_INS} -PROG_MUT__PER_INST_DEL ${PROG_MUT__PER_INST_DEL} -PROG_MUT__PER_PROG_SLIP ${PROG_MUT__PER_PROG_SLIP} -PROG_MUT__PER_MOD_DUP ${PROG_MUT__PER_MOD_DUP} -PROG_MUT__PER_MOD_DEL ${PROG_MUT__PER_MOD_DEL} -PROGRAM_ARGUMENT_MODE ${PROGRAM_ARGUMENT_MODE} -PROGRAM_ARGUMENTS_TYPE_SEARCH ${PROGRAM_ARGUMENTS_TYPE_SEARCH} -PROG_MUT__PER_TAG_RANDOMIZE ${PROG_MUT__PER_TAG_RANDOMIZE}  > run.log
